"""
한글 써멀 프린터 출력 테스트
이미지 기반 한글 텍스트 렌더링
"""

from PIL import Image, ImageDraw, ImageFont
import sys
import os

# 상위 디렉토리의 Adafruit_Thermal 모듈 import
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from Adafruit_Thermal import *

# 프린터 설정
baud_rate = 19200
printer = Adafruit_Thermal('/dev/serial0', baud_rate, timeout=5)


def create_korean_text_image(text, font_size=24, font_path='/usr/share/fonts/truetype/nanum/NanumGothic.ttf'):
    """
    한글 텍스트를 비트맵 이미지로 변환
    
    Args:
        text: 출력할 한글 텍스트
        font_size: 폰트 크기 (기본 24)
        font_path: 한글 폰트 파일 경로
    
    Returns:
        PIL Image 객체 (흑백 비트맵)
    """
    try:
        font = ImageFont.truetype(font_path, font_size)
    except IOError:
        print(f"폰트를 찾을 수 없습니다: {font_path}")
        print("기본 폰트를 사용합니다.")
        font = ImageFont.load_default()
    
    # 텍스트 크기 측정을 위한 임시 이미지
    dummy_img = Image.new('1', (1, 1), 255)
    draw = ImageDraw.Draw(dummy_img)
    
    # 텍스트 경계 상자 계산
    bbox = draw.textbbox((0, 0), text, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    
    # 프린터 너비에 맞춰 이미지 생성 (384픽셀 = 48mm)
    printer_width = 384
    padding = 20
    img_height = text_height + padding * 2
    
    # 흑백 이미지 생성 (1-bit, 255=흰색 배경)
    img = Image.new('1', (printer_width, img_height), 255)
    draw = ImageDraw.Draw(img)
    
    # 텍스트를 중앙 정렬로 그리기
    x = (printer_width - text_width) // 2
    y = padding
    draw.text((x, y), text, font=font, fill=0)  # 0=검은색
    
    return img


def print_korean_text(text, font_size=24):
    """
    한글 텍스트를 써멀 프린터로 출력
    
    Args:
        text: 출력할 한글 텍스트
        font_size: 폰트 크기 (기본 24)
    """
    img = create_korean_text_image(text, font_size)
    printer.printImage(img, LaaT=True)


def print_korean_poem(poem_lines):
    """
    여러 줄의 한글 시를 출력
    
    Args:
        poem_lines: 시의 각 줄을 담은 리스트
    """
    printer.println('\n')
    
    for line in poem_lines:
        if line.strip():  # 빈 줄이 아니면
            print_korean_text(line, font_size=20)
        else:
            printer.println()  # 빈 줄
    
    printer.println('\n')


def test_basic_korean():
    """기본 한글 출력 테스트"""
    print("=== 기본 한글 출력 테스트 ===")
    
    printer.println('\n')
    printer.justify('C')
    printer.setSize('L')
    printer.println('KOREAN TEXT TEST')
    printer.setSize('S')
    printer.println('\n')
    
    # 한글 텍스트 출력
    print_korean_text('안녕하세요', font_size=28)
    print_korean_text('써멀 프린터 테스트', font_size=24)
    
    printer.println('\n\n')


def test_korean_poem():
    """한글 시 출력 테스트"""
    print("=== 한글 시 출력 테스트 ===")
    
    # 테스트용 한글 시
    poem = [
        '바람이 불어오는 곳',
        '',
        '하늘을 보며',
        '구름 사이로',
        '햇살이 내려온다',
        '',
        '조용한 오후',
        '차 한 잔의 여유',
    ]
    
    printer.println('\n')
    printer.justify('C')
    printer.setSize('L')
    printer.println('KOREAN POEM')
    printer.setSize('S')
    printer.println('\n')
    
    printer.justify('L')
    print_korean_poem(poem)
    
    printer.println('\n\n')


def test_mixed_text():
    """영문과 한글 혼합 테스트"""
    print("=== 영문/한글 혼합 출력 테스트 ===")
    
    printer.println('\n')
    printer.justify('C')
    
    # 영문은 기본 printer.println 사용
    printer.setSize('M')
    printer.println('Poetry Camera')
    printer.setSize('S')
    printer.println('\n')
    
    # 한글은 이미지로 출력
    print_korean_text('시 카메라', font_size=26)
    
    printer.println('\n')
    printer.println('Generated by AI')
    print_korean_text('인공지능이 쓴 시', font_size=20)
    
    printer.println('\n\n\n')


if __name__ == '__main__':
    print("한글 써멀 프린터 테스트를 시작합니다...")
    print("프린터가 /dev/serial0에 연결되어 있는지 확인하세요.")
    
    try:
        # 각 테스트 실행
        test_basic_korean()
        test_korean_poem()
        test_mixed_text()
        
        print("테스트 완료!")
        
    except Exception as e:
        print(f"오류 발생: {e}")
        import traceback
        traceback.print_exc()
